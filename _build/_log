### Starting build.
# Target: llama.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:llama.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules llama.ml > llama.ml.depends
# Target: ast.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules ast.ml > ast.ml.depends
# Target: irgen.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:irgen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules irgen.ml > irgen.ml.depends
# Target: ast.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o ast.cmo ast.ml
# Target: sast.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o sast.cmo sast.ml
# Target: lexer.mll, tags: { package(llvm,llvm.analysis,str), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/Users/kaseyfung/.opam/4.13.1/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { package(llvm,llvm.analysis,str), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/Users/kaseyfung/.opam/4.13.1/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(llvm,llvm.analysis,str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules semant.ml > semant.ml.depends
# Target: irgen.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:irgen.cmo, file:irgen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o irgen.cmo irgen.ml
# Target: lexer.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o lexer.cmo lexer.ml
# Target: semant.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o semant.cmo semant.ml
# Target: llama.cmo, tags: { package(llvm,llvm.analysis,str), byte, compile, extension:cmo, extension:ml, file:llama.cmo, file:llama.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm,llvm.analysis,str -o llama.cmo llama.ml
# Target: ast.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o ast.cmx ast.ml
# Target: sast.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o sast.cmx sast.ml
# Target: parser.ml.depends, tags: { package(llvm,llvm.analysis,str), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm,llvm.analysis,str -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o parser.cmx parser.ml
# Target: irgen.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:irgen.cmx, file:irgen.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o irgen.cmx irgen.ml
# Target: lexer.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o lexer.cmx lexer.ml
# Target: semant.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o semant.cmx semant.ml
# Target: llama.cmx, tags: { package(llvm,llvm.analysis,str), compile, extension:cmx, extension:ml, file:llama.cmx, file:llama.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm,llvm.analysis,str -o llama.cmx llama.ml
# Target: llama.native, tags: { package(llvm,llvm.analysis,str), dont_link_with, extension:native, file:llama.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package llvm,llvm.analysis,str ast.cmx sast.cmx irgen.cmx parser.cmx lexer.cmx semant.cmx llama.cmx -o llama.native
# Compilation successful.
